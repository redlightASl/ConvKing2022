import torch
import torch.nn as nn


class CBLStruct(nn.Module):
    def __init__(self):
        super(CBLStruct, self).__init__()
        self.conv = nn.Conv2d(in_channels=1,
                              out_channels=1,
                              kernel_size=3,
                              stride=1,
                              padding=1,
                              bias=True)
        self.bn = nn.BatchNorm2d(1)
        self.relu = nn.ReLU6()

    def forward(self, x):
        x = self.conv(x)
        x = self.bn(x)
        x = self.relu(x)
        return x


if __name__ == '__main__':
    in_weight_2d = torch.tensor([[[[1, 0, 1], [2, 0, 2], [-1, 0, -1]]]],
                                dtype=torch.float32)

    # in_weight_3d = torch.tensor([[[
    #     [1, 0, 1],
    #     [2, 0, 2],
    #     [-1, 0, -1],
    # ], [
    #     [1, 0, 1],
    #     [3, 0, 3],
    #     [-1, 0, -1],
    # ], [
    #     [2, 0, 2],
    #     [2, 0, 2],
    #     [-2, 0, -2]
    # ]]],
    #                             dtype=torch.float32)

    in_data_2d = torch.tensor([[[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]],
                              dtype=torch.float32)

    # in_data_3d = torch.tensor([[[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0],
    #                              [0, 0, 0, 1, 0, 0, 3, 3, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
    #                             [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
    #                             [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 2, 0, 0, 2, 3, 0, 0, 0],
    #                              [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0],
    #                              [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]],
    #                           dtype=torch.float32)

    print(in_weight_2d.size())
    # print(in_weight_3d.size())
    print(in_data_2d.size())
    # print(in_data_3d.size())

    # device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    # net = CBLStruct().to(device)
    net = CBLStruct()
    net.conv.weight.data = in_weight_2d
    print(net.conv.weight.data)

    result = net(in_data_2d)
    print(result.int())